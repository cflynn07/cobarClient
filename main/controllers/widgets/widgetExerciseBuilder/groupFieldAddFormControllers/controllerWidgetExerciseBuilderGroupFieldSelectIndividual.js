// Generated by CoffeeScript 1.6.3
(function() {
  define(['app', 'utils/utilBuildDTQuery'], function(app, utilBuildDTQuery) {
    return app.controller('ControllerWidgetExerciseBuilderGroupFieldSelectIndividual', [
      '$scope', 'apiRequest', '$dialog', function($scope, apiRequest, $dialog) {
        $scope.form = {};
        $scope.cancelAddNewField = function() {
          $scope.form = {};
          $scope.formSelectIndividualAdd.$setPristine();
          return $scope.$parent.viewModel.cancelAddNewField();
        };
        $scope.isFormInvalid = function() {
          if (!$scope.formSelectIndividualAdd) {
            return;
          }
          return $scope.formSelectIndividualAdd.$invalid;
        };
        $scope.submitField = function() {
          apiRequest.post('field', {
            name: $scope.form.name,
            type: 'selectIndividual',
            dictionaryUid: $scope.form.dictionaryUid,
            groupUid: $scope.group.uid,
            ordinal: 0
          }, {}, function(response) {
            return console.log(response);
          });
          return $scope.cancelAddNewField();
        };
        $scope.removeFieldCorrectDictionaryItems = function(uid) {
          return $scope.form.fieldCorrectDictionaryItems.splice($scope.form.fieldCorrectDictionaryItems.indexOf(uid), 1);
        };
        $scope.addToFieldCorrectDictionaryItems = function(uid) {
          if (!_.isArray($scope.form.fieldCorrectDictionaryItems)) {
            $scope.form.fieldCorrectDictionaryItems = [];
          }
          if ($scope.form.fieldCorrectDictionaryItems.indexOf(uid) === -1) {
            return $scope.form.fieldCorrectDictionaryItems.push(uid);
          }
        };
        $scope.dictionaryListDT = {
          columnDefs: [
            {
              mData: null,
              aTargets: [0],
              bSortable: false,
              sWidth: '10px',
              mRender: function(data, type, full) {
                return '<a data-ng-click="form.dictionaryUid = \'' + full.uid + '\'; formSelectIndividualAdd.dictionaryUid.$pristine = false; form.fieldCorrectDictionaryItems = undefined;" class="btn blue">Select</a>';
              }
            }, {
              mData: null,
              aTargets: [1],
              mRender: function(data, type, full) {
                return full.name;
              }
            }
          ],
          options: {
            bStateSave: true,
            iCookieDuration: 2419200,
            bJQueryUI: false,
            bPaginate: true,
            bLengthChange: false,
            bFilter: true,
            bInfo: true,
            bDestroy: true,
            bServerSide: true,
            bProcessing: true,
            fnServerData: function(sSource, aoData, fnCallback, oSettings) {
              var cacheResponse, query;
              query = utilBuildDTQuery(['name'], ['name'], oSettings);
              if (query.filter && !_.isUndefined(query.filter[0])) {
                query.filter[0][3] = 'and';
              }
              query.filter.push(['deletedAt', '=', 'null']);
              cacheResponse = '';
              return oSettings.jqXHR = apiRequest.get('dictionary', [], query, function(response, responseRaw) {
                var dataArr, responseDataString;
                if (response.code === 200) {
                  responseDataString = responseRaw;
                  if (cacheResponse === responseDataString) {
                    return;
                  }
                  cacheResponse = responseDataString;
                  dataArr = _.toArray(response.response.data);
                  return fnCallback({
                    iTotalRecords: response.response.length,
                    iTotalDisplayRecords: response.response.length,
                    aaData: dataArr
                  });
                }
              });
            }
          }
        };
        return $scope.dictionaryItemsListDT = {
          columnDefs: [
            {
              mData: null,
              aTargets: [0],
              bSortable: false,
              sWidth: '105px',
              mRender: function(data, type, full) {
                var html;
                html = '<div style="width:100%;text-align:center;">';
                html += '<a class="btn green" style="margin-left:auto;margin-right:auto;" data-ng-disabled = "(form.fieldCorrectDictionaryItems && form.fieldCorrectDictionaryItems.indexOf(\'' + full.uid + '\') != -1)" data-ng-click="addToFieldCorrectDictionaryItems(\'' + full.uid + '\'); formSelectIndividualAdd.fieldCorrectDictionaryItems.$pristine = false;"><i class="icon-plus m-icon-white"></i> ';
                html += '<span style="color:#FFF !important;" data-ng-hide="(form.fieldCorrectDictionaryItems && form.fieldCorrectDictionaryItems.indexOf(\'' + full.uid + '\') != -1)">Select</span>';
                html += '<span style="color:#FFF !important;" data-ng-show="(form.fieldCorrectDictionaryItems && form.fieldCorrectDictionaryItems.indexOf(\'' + full.uid + '\') != -1)">Selected</span>';
                html += '</a>';
                return html += '</div>';
              }
            }, {
              mData: null,
              aTargets: [1],
              mRender: function(data, type, full) {
                return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].name">' + full.name + '</span>';
              }
            }
          ],
          options: {
            bStateSave: true,
            iCookieDuration: 2419200,
            bJQueryUI: false,
            bPaginate: true,
            bLengthChange: false,
            bFilter: true,
            bInfo: true,
            bDestroy: true,
            bServerSide: true,
            bProcessing: true,
            fnServerData: function(sSource, aoData, fnCallback, oSettings) {
              var cacheResponse, query;
              query = utilBuildDTQuery(['name'], ['name'], oSettings);
              if (!$scope.form.dictionaryUid) {
                fnCallback({
                  iTotalRecords: 0,
                  iTotalDisplayRecords: 0,
                  aaData: []
                });
                return;
              }
              if (query.filter && !_.isUndefined(query.filter[0])) {
                query.filter[0][3] = 'and';
              }
              query.filter.push(['deletedAt', '=', 'null', 'and']);
              query.filter.push(['dictionaryUid', '=', $scope.form.dictionaryUid, 'and']);
              cacheResponse = '';
              return oSettings.jqXHR = apiRequest.get('dictionaryItem', [], query, function(response, responseRaw) {
                var dataArr, responseDataString;
                console.log('response');
                console.log(response);
                if (response.code === 200) {
                  responseDataString = responseRaw;
                  if (cacheResponse === responseDataString) {
                    return;
                  }
                  cacheResponse = responseDataString;
                  dataArr = _.toArray(response.response.data);
                  return fnCallback({
                    iTotalRecords: response.response.length,
                    iTotalDisplayRecords: response.response.length,
                    aaData: dataArr
                  });
                }
              });
            }
          }
        };
      }
    ]);
  });

}).call(this);
