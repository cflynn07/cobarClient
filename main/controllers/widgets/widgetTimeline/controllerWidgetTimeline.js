// Generated by CoffeeScript 1.6.3
(function() {
  define(['jquery', 'underscore', 'utils/utilBuildDTQuery', 'text!views/widgetTimeline/viewWidgetTimeline.html'], function($, _, utilBuildDTQuery, viewWidgetTimeline) {
    return function(Module) {
      Module.run([
        '$templateCache', function($templateCache) {
          return $templateCache.put('viewWidgetTimeline', viewWidgetTimeline);
        }
      ]);
      return Module.controller('ControllerWidgetTimeline', [
        '$scope', '$templateCache', 'socket', 'apiRequest', function($scope, $templateCache, socket, apiRequest) {
          var viewModel;
          viewModel = {
            eventListDT: {
              options: {
                bProcessing: true,
                bStateSave: true,
                iCookieDuration: 0,
                bPaginate: true,
                bLengthChange: true,
                bFilter: true,
                bInfo: true,
                bDestroy: true,
                bServerSide: true,
                sAjaxSource: '/',
                fnServerData: function(sSource, aoData, fnCallback, oSettings) {
                  var cacheResponse, query;
                  query = utilBuildDTQuery(['dateTime', 'name'], ['dateTime', 'name'], oSettings);
                  query.expand = [
                    {
                      resource: 'eventParticipants',
                      expand: [
                        {
                          resource: 'employee'
                        }
                      ]
                    }
                  ];
                  cacheResponse = '';
                  return oSettings.jqXHR = apiRequest.get('event', [], query, function(response, responseRaw) {
                    var empArr;
                    if (response.code !== 200) {
                      return;
                    }
                    if (cacheResponse === responseRaw) {
                      return;
                    }
                    cacheResponse = responseRaw;
                    empArr = _.toArray(response.response.data);
                    return fnCallback({
                      iTotalRecords: response.response.length,
                      iTotalDisplayRecords: response.response.length,
                      aaData: empArr
                    });
                  });
                }
              },
              fnRowCallback: function(nRow, aData, iDisplayIndex) {
                var eventDate, nowDate;
                nowDate = (new Date()).getTime();
                eventDate = (new Date(aData.dateTime)).getTime();
                if (nowDate > eventDate) {
                  return $(nRow).addClass('pastEvent');
                } else {
                  return $(nRow).addClass('upcomingEvent');
                }
              },
              getInitialViewDateTimePercentage: function(uid) {
                var eP, epReadCount, _i, _len, _ref;
                if (_.isUndefined($scope.resourcePool[uid]) || _.isUndefined($scope.resourcePool[uid].eventParticipants)) {
                  return '0';
                }
                epReadCount = 0;
                _ref = $scope.resourcePool[uid].eventParticipants;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  eP = _ref[_i];
                  if (!_.isNull(eP.initialViewDateTime)) {
                    epReadCount++;
                  }
                }
                if (epReadCount === 0 || $scope.resourcePool[uid].eventParticipants.length === 0) {
                  return '0';
                }
                return (epReadCount / $scope.resourcePool[uid].eventParticipants.length * 1.0) * 100 + '';
              },
              getfinalizedDateTimePercentage: function(uid) {
                return '0';
              },
              columnDefs: [
                {
                  mData: null,
                  bSortable: true,
                  aTargets: [0],
                  sWidth: '120px',
                  mRender: function(data, type, full) {
                    return '<span>{{ resourcePool[\'' + full.uid + '\'].dateTime | date:\'short\' }}</span><br><span>({{ resourcePool[\'' + full.uid + '\'].dateTime | fromNow }})</span>';
                  }
                }, {
                  mData: null,
                  bSortable: true,
                  aTargets: [1],
                  mRender: function(data, type, full) {
                    return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].name">' + full.name + '</span>';
                  }
                }, {
                  mData: null,
                  bSortable: true,
                  aTargets: [2],
                  sWidth: '10%',
                  mRender: function(data, type, full) {
                    return '<span>{{ (resourcePool[\'' + full.uid + '\'].eventParticipants | toArray).length }}</span>';
                  }
                }, {
                  mData: null,
                  bSortable: true,
                  aTargets: [3],
                  sWidth: '120px',
                  mRender: function(data, type, full) {
                    return '<div class="progress progress-success" style="margin-bottom:0;">\
                          <div style="width: {{ $parent.viewModel.eventListDT.getInitialViewDateTimePercentage(\'' + full.uid + '\') }}%;" class="bar"></div>\
                        </div>\
                        <span>{{ $parent.viewModel.eventListDT.getInitialViewDateTimePercentage(\'' + full.uid + '\') }}%</span>';
                  }
                }, {
                  mData: null,
                  bSortable: true,
                  aTargets: [4],
                  sWidth: '120px',
                  mRender: function(data, type, full) {
                    return '<div class="progress progress-success" style="margin-bottom:0;">\
                          <div style="width: {{ $parent.viewModel.eventListDT.getfinalizedDateTimePercentage(\'' + full.uid + '\') }}%;" class="bar"></div>\
                        </div>\
                        <span>{{ $parent.viewModel.eventListDT.getfinalizedDateTimePercentage(\'' + full.uid + '\') }}%</span>';
                  }
                }, {
                  mData: null,
                  bSortable: true,
                  aTargets: [5],
                  sWidth: '120px',
                  mRender: function(data, type, full) {
                    return '<div style = "width:100%; text-align:center;">\
                          <a href  = "#{{ viewRoot }}/' + full.uid + '" \
                             class = "btn green">\
                            Summary&nbsp;\
                            <i class="m-icon-swapright m-icon-white"></i>\
                          </a>\
                        </div>';
                  }
                }
              ]
            }
          };
          return $scope.viewModel = viewModel;
        }
      ]);
    };
  });

}).call(this);
