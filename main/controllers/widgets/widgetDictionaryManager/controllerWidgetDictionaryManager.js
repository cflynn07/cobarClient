// Generated by CoffeeScript 1.6.3
(function() {
  define(['app', 'underscore', 'utils/utilBuildDTQuery', 'text!views/widgetDictionaryManager/viewWidgetDictionaryManager.html', 'text!views/widgetDictionaryManager/viewWidgetDictionaryManagerDictionaryItemsButtonsEJS.html', 'text!views/widgetDictionaryManager/viewWidgetDictionaryManagerListButtonsEJS.html', 'text!views/widgetDictionaryManager/viewWidgetDictionaryManagerDictionaryItemEditEJS.html', 'text!views/widgetDictionaryManager/viewWidgetDictionaryManagerArchivedListButtonsEJS.html'], function(app, _, utilBuildDTQuery, viewWidgetDictionaryManager, viewWidgetDictionaryManagerDictionaryItemsButtonsEJS, viewWidgetDictionaryManagerListButtonsEJS, viewWidgetDictionaryManagerDictionaryItemEditEJS, viewWidgetDictionaryManagerArchivedListButtonsEJS) {
    app.run([
      '$templateCache', function($templateCache) {
        return $templateCache.put('viewWidgetDictionaryManager', viewWidgetDictionaryManager);
      }
    ]);
    return app.controller('ControllerWidgetDictionaryManager', [
      '$scope', '$route', '$routeParams', 'socket', 'apiRequest', '$filter', '$dialog', function($scope, $route, $routeParams, socket, apiRequest, $filter, $dialog) {
        var setCurrentDictionary;
        $scope.viewModel = {
          submitRenameDictionaryForm: function() {
            console.log('submitRenameDictionaryForm');
            $scope.viewModel.dictionaryRenameForm.submitting = true;
            return apiRequest.put('dictionary', $scope.viewModel.routeParams.dictionaryUid, {
              name: $scope.viewModel.dictionaryRenameForm.name
            }, {}, function(response) {
              console.log('response', response);
              return $scope.viewModel.closeRenameDictionaryForm();
            });
          },
          closeRenameDictionaryForm: function() {
            $scope.viewModel.dictionaryRenameForm = {};
            $scope.viewModel.showRenameDictionary = false;
            if ($scope.dictionaryRenameForm.$setPristine) {
              return $scope.dictionaryRenameForm.$setPristine();
            }
          },
          dictionaries: {},
          currentDictionaryUid: '',
          showAddNewDictionary: false,
          showAddDictionaryItems: false,
          newDictionaryForm: {},
          newDictionaryItemForm: {},
          archivedDictionariesListLength: 0,
          nonArchivedDictionariesListLength: 0,
          restoreDictionary: function(uid) {
            return apiRequest.put('dictionary', uid, {
              deletedAt: null
            }, {}, function(response) {
              return console.log(response);
            });
          },
          archivedDictionaries: {
            options: {
              bStateSave: true,
              iCookieDuration: 2419200,
              bJQueryUI: false,
              bPaginate: true,
              bLengthChange: true,
              bFilter: false,
              bInfo: true,
              bDestroy: true,
              bServerSide: true,
              bProcessing: true,
              fnServerData: function(sSource, aoData, fnCallback, oSettings) {
                var cacheResponse, query;
                query = utilBuildDTQuery(['name'], ['name'], oSettings);
                query.filter.push(['deletedAt', '!=', 'null']);
                query.expand = [
                  {
                    resource: 'dictionaryItems'
                  }
                ];
                cacheResponse = '';
                return oSettings.jqXHR = apiRequest.get('dictionary', [], query, function(response) {
                  var dataArr, responseDataString;
                  if (response.code === 200) {
                    $scope.viewModel.archivedDictionariesListLength = response.response.length;
                    responseDataString = JSON.stringify(response.response);
                    if (cacheResponse === responseDataString) {
                      return;
                    }
                    cacheResponse = responseDataString;
                    dataArr = _.toArray(response.response.data);
                    return fnCallback({
                      iTotalRecords: response.response.length,
                      iTotalDisplayRecords: response.response.length,
                      aaData: dataArr
                    });
                  }
                });
              }
            },
            columnDefs: [
              {
                mDataProp: 'name',
                aTargets: [0],
                bSortable: true,
                mRender: function(data, type, full) {
                  var resHtml;
                  resHtml = '<a href="#' + $scope.viewRoot + '/' + $scope.escapeHtml(full.uid) + '">';
                  resHtml += data;
                  resHtml += '</a>';
                  return resHtml;
                }
              }, {
                mData: null,
                bSortable: false,
                sWidth: '100px',
                aTargets: [1],
                mRender: function(data, type, full) {
                  return $scope.getKeysLength(full.dictionaryItems);
                }
              }, {
                mData: null,
                bSortable: false,
                aTargets: [2],
                sWidth: '100px',
                mRender: function(data, type, full) {
                  var html, uid, viewRoot;
                  uid = $scope.escapeHtml(full.uid);
                  viewRoot = $scope.viewRoot;
                  return html = new EJS({
                    text: viewWidgetDictionaryManagerArchivedListButtonsEJS
                  }).render({
                    uid: uid,
                    viewRoot: viewRoot
                  });
                }
              }
            ]
          },
          dictionaryItemsOptions: {
            bStateSave: true,
            iCookieDuration: 2419200,
            bJQueryUI: false,
            bPaginate: true,
            bLengthChange: true,
            bFilter: true,
            bInfo: true,
            bDestroy: true,
            bServerSide: true,
            bProcessing: true,
            fnServerData: function(sSource, aoData, fnCallback, oSettings) {
              var cacheResponse, query;
              query = utilBuildDTQuery(['name'], ['name'], oSettings);
              if (!$scope.viewModel.currentDictionaryUid) {
                return;
              }
              if (query.filter && query.filter.length) {
                query.filter[0][3] = 'and';
              }
              query.filter.push(['deletedAt', '=', 'null', 'and']);
              query.filter.push(['dictionaryUid', '=', $scope.viewModel.currentDictionaryUid, 'and']);
              cacheResponse = '';
              return oSettings.jqXHR = apiRequest.get('dictionaryItem', [], query, function(response) {
                var dataArr, responseDataString;
                if (response.code === 200) {
                  responseDataString = JSON.stringify(response.response);
                  if (cacheResponse === responseDataString) {
                    return;
                  }
                  cacheResponse = responseDataString;
                  dataArr = _.toArray(response.response.data);
                  return fnCallback({
                    iTotalRecords: response.response.length,
                    iTotalDisplayRecords: response.response.length,
                    aaData: dataArr
                  });
                }
              });
            }
          },
          dictionaryListOptions: {
            bStateSave: true,
            iCookieDuration: 2419200,
            bJQueryUI: false,
            bPaginate: true,
            bLengthChange: true,
            bFilter: false,
            bInfo: true,
            bDestroy: true,
            bServerSide: true,
            bProcessing: true,
            fnServerData: function(sSource, aoData, fnCallback, oSettings) {
              var cacheResponse, query;
              query = utilBuildDTQuery(['name'], ['name'], oSettings);
              query.filter.push(['deletedAt', '=', 'null']);
              query.expand = [
                {
                  resource: 'dictionaryItems'
                }
              ];
              cacheResponse = '';
              return oSettings.jqXHR = apiRequest.get('dictionary', [], query, function(response) {
                var dataArr, responseDataString;
                if (response.code === 200) {
                  $scope.viewModel.nonArchivedDictionariesListLength = response.response.length;
                  responseDataString = JSON.stringify(response.response);
                  if (cacheResponse === responseDataString) {
                    return;
                  }
                  cacheResponse = responseDataString;
                  dataArr = _.toArray(response.response.data);
                  return fnCallback({
                    iTotalRecords: response.response.length,
                    iTotalDisplayRecords: response.response.length,
                    aaData: dataArr
                  });
                }
              });
            }
          },
          columnDefsCurrentDictionaryItems: [
            {
              mDataProp: "name",
              aTargets: [0],
              mRender: function(data, type, full) {
                var html, name, uid;
                name = 'editDictionaryItemForm' + full.uid.replace(/-/g, '_');
                name = $scope.escapeHtml(name);
                uid = $scope.escapeHtml(full.uid);
                return html = new EJS({
                  text: viewWidgetDictionaryManagerDictionaryItemEditEJS
                }).render({
                  name: name,
                  uid: uid,
                  data: data
                });
              }
            }, {
              mData: null,
              bSortable: false,
              sWidth: '100px',
              aTargets: [1],
              mRender: function(data, type, full) {
                var html, name, uid;
                name = 'editDictionaryItemForm' + full.uid.replace(/-/g, '_');
                name = $scope.escapeHtml(name);
                uid = $scope.escapeHtml(full.uid.replace(/-/g, ''));
                html = new EJS({
                  text: viewWidgetDictionaryManagerDictionaryItemsButtonsEJS
                }).render({
                  name: name,
                  uid: uid,
                  full: full
                });
                return html;
              }
            }
          ],
          columnDefsDictionaryList: [
            {
              mDataProp: 'name',
              aTargets: [0],
              bSortable: true,
              mRender: function(data, type, full) {
                var resHtml;
                resHtml = '<a href="#' + $scope.viewRoot + '/' + $scope.escapeHtml(full.uid) + '">';
                resHtml += data;
                resHtml += '</a>';
                return resHtml;
              }
            }, {
              mData: null,
              bSortable: false,
              sWidth: '100px',
              aTargets: [1],
              mRender: function(data, type, full) {
                return $scope.getKeysLength(full.dictionaryItems);
              }
            }, {
              mData: null,
              bSortable: false,
              aTargets: [2],
              sWidth: '100px',
              mRender: function(data, type, full) {
                var html, uid, viewRoot;
                uid = $scope.escapeHtml(full.uid);
                viewRoot = $scope.viewRoot;
                return html = new EJS({
                  text: viewWidgetDictionaryManagerListButtonsEJS
                }).render({
                  uid: uid,
                  viewRoot: viewRoot
                });
              }
            }
          ],
          closeAddNewDictionary: function() {
            $scope.newDictionaryForm.$setPristine();
            $scope.viewModel.showAddNewDictionary = false;
            $scope.viewModel.newDictionaryForm = {};
            return $scope.viewModel.newDictionaryForm.submitting = false;
          },
          postNewDictionary: function() {
            $scope.viewModel.newDictionaryForm.submitting = true;
            return apiRequest.post('dictionary', {
              name: $scope.viewModel.newDictionaryForm.name
            }, {}, function(response) {
              $scope.viewModel.closeAddNewDictionary();
              if (response.code === 201) {
                return window.location.href = '#' + $scope.viewRoot + '/' + response.uids[0];
              }
            });
          },
          closeAddNewDictionaryItem: function() {
            $scope.newDictionaryItemForm.$setPristine();
            $scope.viewModel.showAddDictionaryItems = false;
            $scope.viewModel.newDictionaryItemForm = {};
            return $scope.viewModel.newDictionaryItemForm.submitting = false;
          },
          postNewDictionaryItem: function() {
            $scope.viewModel.newDictionaryItemForm.submitting = true;
            return apiRequest.post('dictionaryItem', {
              dictionaryUid: $scope.viewModel.currentDictionaryUid,
              name: $scope.viewModel.newDictionaryItemForm.name
            }, {}, function(response) {
              return $scope.viewModel.closeAddNewDictionaryItem();
            });
          }
        };
        $scope.viewModel.deleteConfirmDialogDictionary = function(dictionaryUid) {
          return apiRequest.get('dictionary', [dictionaryUid], {}, function(response) {
            var btns, msg, title;
            if (response.code === 200) {
              title = 'Delete Dialog';
              msg = 'Dire Consequences...';
              btns = [
                {
                  result: false,
                  label: 'Cancel',
                  cssClass: 'red'
                }, {
                  result: true,
                  label: 'Confirm',
                  cssClass: 'green'
                }
              ];
              return $dialog.messageBox(title, msg, btns).open().then(function(result) {
                if (result) {
                  return apiRequest["delete"]('dictionary', dictionaryUid, {}, function(result) {});
                }
              });
            }
          });
        };
        $scope.viewModel.deleteConfirmDialogDictionaryItem = function(dictionaryItemUid) {
          return apiRequest.get('dictionaryItem', [dictionaryItemUid], {}, function(response) {
            var btns, msg, title;
            title = 'Delete Dialog';
            msg = 'Dire Consequences...';
            btns = [
              {
                result: false,
                label: 'Cancel',
                cssClass: 'red'
              }, {
                result: true,
                label: 'Confirm',
                cssClass: 'green'
              }
            ];
            return $dialog.messageBox(title, msg, btns).open().then(function(result) {
              if (result) {
                return apiRequest["delete"]('dictionaryItem', dictionaryItemUid, {}, function(result) {});
              }
            });
          });
        };
        $scope.viewModel.cancelEditDictionaryItem = function() {
          $scope.viewModel.editingDictionaryItemTempValue = '';
          return $scope.viewModel.editingDictionaryItemUid = '';
        };
        $scope.viewModel.editDictionaryItem = function(dictionaryUid) {
          $scope.viewModel.editingDictionaryItemUid = dictionaryUid;
          return $scope.viewModel.editingDictionaryItemTempValue = $scope.resourcePool[$scope.viewModel.editingDictionaryItemUid].name;
        };
        $scope.viewModel.saveEditingDictionaryItem = function(isInvalid) {
          if (isInvalid) {
            return;
          }
          apiRequest.put('dictionaryItem', $scope.viewModel.editingDictionaryItemUid, {
            name: $scope.viewModel.editingDictionaryItemTempValue
          }, {}, function(response) {});
          return $scope.viewModel.cancelEditDictionaryItem();
        };
        $scope.viewModel.editingDictionaryItemUid = '';
        $scope.viewModel.editingDictionaryItemTempValue = '';
        setCurrentDictionary = function() {
          return $scope.viewModel.currentDictionaryUid = $routeParams.dictionaryUid;
        };
        $scope.$on('$routeChangeSuccess', function() {
          $scope.viewModel.showAddDictionaryItems = false;
          $scope.newDictionaryItemForm.$setPristine();
          $scope.viewModel.newDictionaryItemForm = {};
          $scope.viewModel.showAddNewDictionary = false;
          $scope.newDictionaryForm.$setPristine();
          $scope.viewModel.newDictionaryForm = {};
          $scope.viewModel.routeParams = $routeParams;
          return setCurrentDictionary();
        });
        $scope.viewModel.routeParams = $routeParams;
        return setCurrentDictionary();
      }
    ]);
  });

}).call(this);
