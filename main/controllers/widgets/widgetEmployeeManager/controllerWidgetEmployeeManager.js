// Generated by CoffeeScript 1.6.3
(function() {
  define(['app', 'jquery', 'async', 'ejs', 'bootstrapFileUpload', 'bootstrap', 'underscore', 'utils/utilBuildDTQuery', 'spacetree', 'text!views/widgetEmployeeManager/viewWidgetEmployeeManager.html', 'text!views/widgetEmployeeManager/viewPartialEmployeeManagerAddManualForm.html', 'text!views/widgetEmployeeManager/viewPartialEmployeeManagerAddCSVForm.html', 'text!views/widgetEmployeeManager/viewPartialEmployeeManagerListButtonsEJS.html', 'text!views/widgetEmployeeManager/viewPartialEmployeeManagerEditEmployeeEJS.html'], function(app, $, async, EJS, bootstrapFileUpload, bootstrap, _, utilBuildDTQuery, $jit, viewWidgetEmployeeManager, viewPartialEmployeeManagerAddManualForm, viewPartialEmployeeManagerAddCSVForm, viewPartialEmployeeManagerListButtonsEJS, viewPartialEmployeeManagerEditEmployeeEJS) {
    app.run([
      '$templateCache', function($templateCache) {
        $templateCache.put('viewWidgetEmployeeManager', viewWidgetEmployeeManager);
        $templateCache.put('viewPartialEmployeeManagerAddManualForm', viewPartialEmployeeManagerAddManualForm);
        return $templateCache.put('viewPartialEmployeeManagerAddCSVForm', viewPartialEmployeeManagerAddCSVForm);
      }
    ]);
    app.controller('ControllerWidgetEmployeeManagerCSVUpload', [
      '$scope', 'apiRequest', function($scope, apiRequest) {
        $scope.viewModel = {
          uploadComplete: false,
          csvUsersResult: [],
          currentProcessingIterator: 0,
          currentProgressPercent: 0,
          validCSV: false,
          processingUsers: false,
          processNewUsers: function() {
            var apiPostArr, d1, item, _i, _len, _ref;
            $scope.viewModel.processingUsers = true;
            apiPostArr = [];
            _ref = $scope.viewModel.csvUsersResult;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              apiPostArr.push({
                firstName: item[0],
                lastName: item[1],
                email: item[2],
                phone: item[3]
              });
            }
            d1 = Date.now();
            return apiRequest.post('employee', apiPostArr, {
              silent: true
            }, function(response) {
              console.log('response');
              console.log(response);
              return console.log(Date.now() - d1);
            });
            /*
            async.mapLimit $scope.viewModel.csvUsersResult, 1, (item, callback) ->
              d1 = Date.now()
              apiRequest.post 'employee', {
                firstName: item[0]
                lastName:  item[1]
                email:     item[2]
                phone:     item[3]
              }, (response) ->
            
                $scope.viewModel.currentProcessingIterator++
                $scope.viewModel.currentProgressPercent = Math.floor(($scope.viewModel.currentProcessingIterator / $scope.viewModel.csvUsersResult.length) * 100)
            
                if !$scope.$$phase
                  $scope.$apply()
                console.log Date.now() - d1
                callback()
            
            , (err, result) ->
              cosole.log 'done with all!'
            */

          }
        };
        $scope.uploadStart = function(e, response) {
          return console.log('start');
        };
        return $scope.uploadComplete = function(e, response) {
          console.log('complete');
          if (response === 'success') {
            $scope.viewModel.csvUsersResult = JSON.parse(e.responseText);
            $scope.viewModel.validCSV = _.isArray($scope.viewModel.csvUsersResult);
            return $scope.viewModel.uploadComplete = true;
          }
        };
      }
    ]);
    return app.controller('ControllerWidgetEmployeeManager', [
      '$scope', '$route', '$routeParams', 'socket', 'apiRequest', '$filter', '$dialog', function($scope, $route, $routeParams, socket, apiRequest, $filter, $dialog) {
        var resetHelper, routeChangeInitialize, viewModel;
        resetHelper = function() {
          viewModel.showAddNewEmployee = false;
          viewModel.addNewEmployeeMode = false;
          return viewModel.newEmployeeManualAddForm = {};
        };
        viewModel = {
          deleteConfirmDialogEmployee: function(employeeUid) {
            console.log('hi');
            return;
            console.log('fooba');
            return apiRequest.get('employee', [employeeUid], {}, function(response) {
              var btns, msg, title;
              if (response.code === 200) {
                title = 'Delete Dialog';
                msg = 'Dire Consequences...';
                btns = [
                  {
                    result: false,
                    label: 'Cancel',
                    cssClass: 'red'
                  }, {
                    result: true,
                    label: 'Confirm',
                    cssClass: 'green'
                  }
                ];
                return $dialog.messageBox(title, msg, btns).open().then(function(result) {
                  if (result) {
                    return apiRequest["delete"]('employee', employeeUid, {}, function(result) {});
                  }
                });
              }
            });
          },
          updateEmployee: function() {
            viewModel.editEmployeeFormSubmitting = true;
            return apiRequest.put('employee', viewModel.routeParams.employeeUid, {
              firstName: viewModel.editEmployeeForm.firstName,
              lastName: viewModel.editEmployeeForm.lastName,
              email: viewModel.editEmployeeForm.email,
              phone: viewModel.editEmployeeForm.phone
            }, {}, function(response) {
              return window.location.hash = '#' + $scope.viewRoot;
            });
          },
          fetchEmployee: function() {
            $(window).scrollTop(0);
            if (!viewModel.routeParams.employeeUid) {
              return;
            }
            return apiRequest.get('employee', [viewModel.routeParams.employeeUid], {}, function(response) {
              return $scope.viewModel.editEmployeeForm = _.extend({}, $scope.resourcePool[viewModel.routeParams.employeeUid]);
            });
          },
          showAddNewEmployee: false,
          addNewEmployeeMode: false,
          showAddNewEmployeeOpen: function() {
            resetHelper();
            return viewModel.showAddNewEmployee = true;
          },
          showAddNewEmployeeClose: function() {
            return resetHelper();
          },
          showAddNewEmployeeSubmit: function() {
            $scope.viewModel.newEmployeeManualAddForm.submitting = true;
            return apiRequest.post('employee', {
              firstName: viewModel.newEmployeeManualAddForm.firstName,
              lastName: viewModel.newEmployeeManualAddForm.lastName,
              email: viewModel.newEmployeeManualAddForm.email,
              phone: viewModel.newEmployeeManualAddForm.phone
            }, {}, function(response) {
              console.log('finished');
              console.log(response);
              return resetHelper();
            });
          },
          employees: {},
          employeesListLength: 0,
          employeeListDT: {
            detailRow: function(obj) {
              return '<div data-edit-employee\
                         data-client-orm-share = "clientOrmShare"\
                         data-resource-pool    = "resourcePool"\
                         data-employee-uid     ="' + obj.uid + '"></div>';
            },
            options: {
              bProcessing: true,
              bStateSave: true,
              iCookieDuration: 2419200,
              bPaginate: true,
              bLengthChange: true,
              bFilter: true,
              bInfo: true,
              bDestroy: true,
              bServerSide: true,
              sAjaxSource: '/',
              fnServerData: function(sSource, aoData, fnCallback, oSettings) {
                var cacheResponse, query;
                query = utilBuildDTQuery(['firstName', 'lastName', 'email', 'phone'], ['firstName', 'lastName', 'email', 'phone'], oSettings);
                cacheResponse = '';
                return oSettings.jqXHR = apiRequest.get('employee', [], query, function(response) {
                  var empArr, responseDataString;
                  if (response.code === 200) {
                    viewModel.employeesListLength = response.response.length;
                    responseDataString = JSON.stringify(response.response);
                    if (cacheResponse === responseDataString) {
                      return;
                    }
                    cacheResponse = responseDataString;
                    empArr = _.toArray(response.response.data);
                    return fnCallback({
                      iTotalRecords: response.response.length,
                      iTotalDisplayRecords: response.response.length,
                      aaData: empArr
                    });
                  }
                });
              }
            },
            columnDefs: [
              {
                mData: null,
                bSortable: true,
                aTargets: [0],
                sWidth: '8%',
                mRender: function(data, type, full) {
                  return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].firstName">' + full.firstName + '</span>';
                }
              }, {
                mData: null,
                bSortable: true,
                aTargets: [1],
                sWidth: '8%',
                mRender: function(data, type, full) {
                  return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].lastName">' + full.lastName + '</span>';
                }
              }, {
                mData: null,
                bSortable: true,
                aTargets: [2],
                mRender: function(data, type, full) {
                  return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].email">' + full.email + '</span>';
                }
              }, {
                mData: null,
                bSortable: true,
                aTargets: [3],
                mRender: function(data, type, full) {
                  return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].phone | tel">' + full.phone + '</span>';
                }
              }, {
                mData: null,
                bSortable: false,
                aTargets: [4],
                mRender: function(data, type, full) {
                  return 'Delegate';
                }
              }, {
                mData: null,
                bSortable: false,
                aTargets: [5],
                mRender: function(data, type, full) {
                  return 'bd0';
                }
              }, {
                mData: null,
                bSortable: false,
                aTargets: [6],
                mRender: function(data, type, full) {
                  return 'bd1';
                }
              }, {
                mData: null,
                bSortable: false,
                aTargets: [7],
                mRender: function(data, type, full) {
                  return 'bd2';
                }
              }, {
                mData: null,
                bSortable: false,
                aTargets: [8],
                mRender: function(data, type, full) {
                  return new EJS({
                    text: viewPartialEmployeeManagerListButtonsEJS
                  }).render(full);
                }
              }
            ]
          }
        };
        $scope.$on('$routeChangeSuccess', function() {
          return routeChangeInitialize();
        });
        routeChangeInitialize = function() {
          viewModel.routeParams = $routeParams;
          viewModel.editEmployeeFormSubmitting = false;
          viewModel.editEmployeeFormSubmitting = false;
          if ($scope.editEmployeeForm && $scope.editEmployeeForm.$setPristine) {
            $scope.editEmployeeForm.$setPristine();
          }
          return viewModel.fetchEmployee();
        };
        routeChangeInitialize();
        return $scope.viewModel = viewModel;
      }
    ]);
  });

}).call(this);
