// Generated by CoffeeScript 1.6.3
(function() {
  define(['app', 'underscore', 'jquery', 'utils/utilSoundManager', 'text!views/viewWidgetCoreHeader.html'], function(app, _, $, utilSoundManager, viewWidgetCoreHeader) {
    Module.run([
      '$templateCache', function($templateCache) {
        return $templateCache.put('viewWidgetCoreHeader', viewWidgetCoreHeader);
      }
    ]);
    return Module.controller('ControllerWidgetCoreHeader', [
      '$scope', '$rootScope', 'authenticate', 'apiRequest', function($scope, $rootScope, authenticate, apiRequest) {
        var fetchActivity, gritterNotification;
        $rootScope.rootActivityFeed = false;
        fetchActivity = function(uid, completedCallback) {
          if (uid == null) {
            uid = null;
          }
          if (completedCallback == null) {
            completedCallback = null;
          }
          return apiRequest.get('activity', [uid], {
            limit: 20,
            order: [['createdAt', 'desc']],
            expand: [
              {
                resource: 'employee'
              }, {
                resource: 'template'
              }, {
                resource: 'revision'
              }, {
                resource: 'dictionary'
              }, {
                resource: 'event',
                expand: [
                  {
                    resource: 'revision'
                  }, {
                    resource: 'eventParticipants'
                  }
                ]
              }
            ]
          }, function(response, rawResponse, fromCache) {
            if (response.code === 200) {
              $rootScope.rootActivityFeed = response.response.data;
            }
            if (_.isFunction(completedCallback)) {
              return completedCallback();
            }
          });
        };
        $rootScope.fetchActivity = fetchActivity;
        gritterNotification = function(data) {
          var activityItem;
          utilSoundManager.alert.play();
          activityItem = data;
          switch (activityItem.type) {
            case 'createDictionary':
              return $.gritter.add({
                title: 'New Dictionary "' + activityItem.dictionary.name + '"',
                text: 'Created by ' + activityItem.employee.firstName + ' ' + activityItem.employee.lastName
              });
            case 'createEmployee':
              return $.gritter.add({
                title: 'New Employee "' + activityItem.employee.firstName + ' ' + activityItem.employee.lastName + '"'
              });
            case 'createEvent':
              return $.gritter.add({
                title: 'New ' + (activityItem.event.type === 'full' ? 'exercise' : 'quiz') + ' "' + activityItem.event.name + '"',
                text: 'Created by ' + activityItem.employee.firstName + ' ' + activityItem.employee.lastName
              });
            case 'eventInitialized':
              return $.gritter.add({
                title: (activityItem.event.type === 'full' ? 'Exercise' : 'Quiz') + ' "' + activityItem.event.name + '" initiated',
                text: 'Just now'
              });
          }
        };
        $scope.$on('resourcePost', function(e, data) {
          var uid;
          if (data['resourceName'] !== 'activity') {
            return;
          }
          uid = data['resource']['uid'];
          return fetchActivity(null, function() {
            var item;
            item = $scope.resourcePool[uid];
            if (!_.isUndefined(item.employee) && !_.isUndefined(item.template) && !_.isUndefined(item.revision) && !_.isUndefined(item.dictionary) && !_.isUndefined(item.event)) {
              return gritterNotification($scope.resourcePool[uid]);
            }
          });
        });
        fetchActivity();
        $scope.toggleTopBarOpen = function() {
          console.log('top');
          return $rootScope.topBarOpen = !$rootScope.topBarOpen;
        };
        return $scope.logout = function() {
          return authenticate.unauthenticate();
        };
      }
    ]);
  });

}).call(this);
