// Generated by CoffeeScript 1.6.3
(function() {
  define(['app', 'jquery', 'underscore', 'text!views/viewCoreWidgets.html', 'config/clientConfig'], function(app, $, _, viewCoreWidgets, clientConfig) {
    app.run([
      '$templateCache', function($templateCache) {
        return $templateCache.put('viewCoreWidgets', viewCoreWidgets);
      }
    ]);
    /*
    # Manages the dynamic insertion of widgets to the main content area of the application
    */

    return app.controller('ControllerCoreWidgets', [
      '$scope', '$route', '$rootScope', function($scope, $route, $rootScope) {
        var isDerivativeRoute, loadNewRoute, previousRouteGroup, primaryWidgetRow, stripAllButBC, trigger4oh4;
        primaryWidgetRow = [];
        $scope.widgetRows = [primaryWidgetRow];
        previousRouteGroup = '';
        $rootScope.widgetsData = {};
        isDerivativeRoute = function(newRouteTitle) {
          var result;
          result = true;
          if (newRouteTitle !== previousRouteGroup) {
            result = false;
            previousRouteGroup = newRouteTitle;
          }
          return result;
        };
        stripAllButBC = function() {
          return $scope.widgetRows = [primaryWidgetRow];
        };
        trigger4oh4 = function() {
          var widgets;
          widgets = stripAllButBC();
          widgets.push({
            widget: 'viewWidget4oh4'
          });
          $scope.widgetRows = widgets;
          return previousRouteGroup = '';
        };
        loadNewRoute = function() {
          var existingFadeIns, loadNewRouteChangeCallback;
          existingFadeIns = $('.animated.fadeInRightBig');
          loadNewRouteChangeCallback = function() {
            var rowWidgets, spanLength, widget, widgetObjects, widgets, _i, _j, _len, _len1, _ref;
            if (_.isUndefined($route.current.$$route)) {
              if (previousRouteGroup === '' && $scope.rootUser) {
                window.location.hash = '/' + clientConfig.simplifiedUserCategories[$scope.rootUser.type] + '/themis';
                return;
              } else {
                trigger4oh4();
                return;
              }
            }
            if ($route.current.$$route.group !== previousRouteGroup) {
              previousRouteGroup = $route.current.$$route.group;
              $('body').animate({
                scrollTop: 0
              }, 700);
              widgets = stripAllButBC();
              if (!$route.current.$$route.widgetViews || !$route.current.$$route.widgetViews.length) {
                return;
              }
              $rootScope.widgetsData = {};
              _ref = $route.current.$$route.widgetViews;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                rowWidgets = _ref[_i];
                widgetObjects = [];
                for (_j = 0, _len1 = rowWidgets.length; _j < _len1; _j++) {
                  widget = rowWidgets[_j];
                  spanLength = 'span12';
                  if (rowWidgets.length === 2) {
                    spanLength = 'span6';
                  }
                  widgetObjects.push({
                    spanLength: spanLength,
                    widget: widget.name
                  });
                  $rootScope.widgetsData[widget.name] = widget.data;
                }
                $scope.widgetRows.push(widgetObjects);
              }
              return $rootScope.viewRoot = $route.current.$$route.root;
            }
          };
          /*
          if existingFadeIns.length
            existingFadeIns.addClass 'fadeOutDownBig'
            setTimeout () ->
              loadNewRouteChangeCallback()
              $scope.$apply()
            , 200
          else
          */

          return loadNewRouteChangeCallback();
        };
        $scope.$on('$routeChangeSuccess', function(event, current, previous) {
          return loadNewRoute();
        });
        return loadNewRoute();
      }
    ]);
  });

}).call(this);
