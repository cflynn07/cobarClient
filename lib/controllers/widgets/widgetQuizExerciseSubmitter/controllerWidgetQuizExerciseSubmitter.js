// Generated by CoffeeScript 1.6.3
(function() {
  define(['jquery', 'angular', 'ejs', 'utils/utilBuildDTQuery', 'text!views/widgetQuizExerciseSubmitter/viewWidgetQuizExerciseSubmitter.html', 'text!views/widgetQuizExerciseSubmitter/partials/viewPartialQuizExerciseSubmitterOpenResponse.html', 'text!views/widgetQuizExerciseSubmitter/partials/viewPartialQuizExerciseSubmitterSelectIndividual.html', 'text!views/widgetQuizExerciseSubmitter/partials/viewPartialQuizExerciseSubmitterSelectMultiple.html', 'text!views/widgetQuizExerciseSubmitter/partials/viewPartialQuizExerciseSubmitterYesNo.html', 'text!views/widgetQuizExerciseSubmitter/partials/viewPartialQuizExerciseSubmitterSlider.html'], function($, angular, EJS, utilBuildDTQuery, viewWidgetQuizExerciseSubmitter, viewPartialQuizExerciseSubmitterOpenResponse, viewPartialQuizExerciseSubmitterSelectIndividual, viewPartialQuizExerciseSubmitterSelectMultiple, viewPartialQuizExerciseSubmitterYesNo, viewPartialQuizExerciseSubmitterSlider) {
    return function(Module) {
      Module.run([
        '$templateCache', function($templateCache) {
          $templateCache.put('viewWidgetQuizExerciseSubmitter', viewWidgetQuizExerciseSubmitter);
          $templateCache.put('viewPartialQuizExerciseSubmitterOpenResponse', viewPartialQuizExerciseSubmitterOpenResponse);
          $templateCache.put('viewPartialQuizExerciseSubmitterSelectIndividual', viewPartialQuizExerciseSubmitterSelectIndividual);
          $templateCache.put('viewPartialQuizExerciseSubmitterSelectMultiple', viewPartialQuizExerciseSubmitterSelectMultiple);
          $templateCache.put('viewPartialQuizExerciseSubmitterYesNo', viewPartialQuizExerciseSubmitterYesNo);
          return $templateCache.put('viewPartialQuizExerciseSubmitterSlider', viewPartialQuizExerciseSubmitterSlider);
        }
      ]);
      /*
        Helper controller for select individual form field elements
      */

      Module.controller('ControllerWidgetQuizExerciseSubmitter_SelectIndividualHelper', [
        '$scope', '$route', '$routeParams', 'apiRequest', '$filter', function($scope, $route, $routeParams, apiRequest, $filter) {
          return $scope.selectIndividualTable = {
            options: {
              bStateSave: true,
              iCookieDuration: 0,
              bJQueryUI: false,
              bPaginate: true,
              bLengthChange: true,
              bFilter: true,
              bInfo: true,
              bDestroy: true,
              bServerSide: true,
              bProcessing: true,
              fnServerData: function(sSource, aoData, fnCallback, oSettings) {
                var cacheResponse, query;
                query = utilBuildDTQuery(['name'], ['name'], oSettings);
                if (!$scope.field.dictionaryUid) {
                  return;
                }
                if (query.filter.length > 0) {
                  query.filter[0].push('and');
                }
                query.filter.push(['deletedAt', '=', 'null', 'and']);
                query.filter.push(['dictionaryUid', '=', $scope.field.dictionaryUid, 'and']);
                cacheResponse = '';
                return oSettings.jqXHR = apiRequest.get('dictionaryItem', [], query, function(response) {
                  var dataArr, responseDataString;
                  if (response.code !== 200) {
                    return;
                  }
                  responseDataString = JSON.stringify(response.response);
                  if (cacheResponse === responseDataString) {
                    return;
                  }
                  cacheResponse = responseDataString;
                  dataArr = _.toArray(response.response.data);
                  return fnCallback({
                    iTotalRecords: response.response.length,
                    iTotalDisplayRecords: response.response.length,
                    aaData: dataArr
                  });
                });
              }
            },
            columnDefs: [
              {
                mData: null,
                aTargets: [0],
                mRender: function(data, type, full) {
                  return full.name;
                }
              }, {
                mData: null,
                bSortable: false,
                aTargets: [1],
                mRender: function(data, type, full) {
                  var html;
                  html = '<button data-ng-click="viewModel.exerciseQuizForm[field.uid] = \'' + full.uid + '\'; viewModel.fields[field.uid].$pristine = false" class="btn blue">';
                  html += 'Select';
                  return html += '</button>';
                }
              }
            ]
          };
        }
      ]);
      return Module.controller('ControllerWidgetQuizExerciseSubmitter', [
        '$scope', '$route', '$routeParams', 'apiRequest', '$filter', function($scope, $route, $routeParams, apiRequest, $filter) {
          var getGroupsArrayHelper, moveRevisionGroupHelper, viewModel;
          getGroupsArrayHelper = function() {
            var groupsArray;
            groupsArray = $filter('deleted')(viewModel.revision.groups);
            groupsArray = $filter('orderBy')(groupsArray, 'ordinal');
            return groupsArray;
          };
          moveRevisionGroupHelper = function(direction) {
            var groupsArray, key, value, _i, _len, _results;
            if (viewModel.activeRevisionGroupUid === '') {
              return;
            }
            groupsArray = getGroupsArrayHelper();
            _results = [];
            for (key = _i = 0, _len = groupsArray.length; _i < _len; key = ++_i) {
              value = groupsArray[key];
              if (value.uid === viewModel.activeRevisionGroupUid) {
                if (!_.isUndefined(groupsArray[key + direction])) {
                  viewModel.activeRevisionGroupUid = groupsArray[key + direction].uid;
                }
                break;
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          };
          viewModel = {
            fields: {},
            exerciseQuizForm: {},
            routeParams: $routeParams,
            eventParticipant: {},
            revision: {},
            activeRevisionGroupUid: '',
            isGroupValidContinue: function(groupUid) {
              var groupFields, key, value, _i, _len;
              if (!groupUid || _.isUndefined(viewModel.revision.groups[groupUid])) {
                return;
              }
              groupFields = $filter('deleted')(viewModel.revision.groups[groupUid].fields);
              for (key = _i = 0, _len = groupFields.length; _i < _len; key = ++_i) {
                value = groupFields[key];
                if (!$scope.viewModel.fields[value.uid]) {
                  return false;
                }
                if (!$scope.viewModel.fields[value.uid].$valid) {
                  return false;
                }
              }
              return true;
            },
            incrementActiveRevisionGroup: function() {
              return moveRevisionGroupHelper(1);
            },
            decrementActiveRevisionGroup: function() {
              return moveRevisionGroupHelper(-1);
            },
            setActiveRevisionGroup: function(groupUid) {
              var groupsArray;
              if (viewModel.activeRevisionGroupUid === '') {
                groupsArray = getGroupsArrayHelper();
                if (groupsArray.length) {
                  return viewModel.activeRevisionGroupUid = groupsArray[0].uid;
                }
              }
            },
            /*
              Idea here is to get all submissionFields for this EventParticipant and
              return them as a hash, with the index of the hash being the "Field" uid
              that each submissionField is associated with
            */

            getSubissionFields: function() {
              var eP;
              return eP = $scope.resourcePool[viewModel.routeParams.eventParticipantUid];
            },
            getEventParticipant: function() {
              if (!viewModel.routeParams.eventParticipantUid) {
                return;
              }
              return apiRequest.get('eventParticipant', [viewModel.routeParams.eventParticipantUid], {
                expand: [
                  {
                    resource: 'submissionFields'
                  }, {
                    resource: 'event',
                    expand: [
                      {
                        resource: 'employee'
                      }, {
                        resource: 'revision'
                      }
                    ]
                  }
                ]
              }, function(response) {
                var eP;
                if (response.code !== 200) {
                  return;
                }
                eP = $scope.resourcePool[viewModel.routeParams.eventParticipantUid];
                if (_.isUndefined(eP) || _.isUndefined(eP.event.revision) || _.isUndefined(eP.event.revision.uid)) {
                  return;
                }
                return apiRequest.get('revision', [eP.event.revision.uid], {
                  expand: [
                    {
                      resource: 'groups',
                      expand: [
                        {
                          resource: 'fields'
                        }
                      ]
                    }
                  ]
                }, function(revisionResponse) {
                  if (revisionResponse.code !== 200) {
                    return;
                  }
                  viewModel.getSubissionFields();
                  viewModel.revision = revisionResponse.response.data;
                  return viewModel.setActiveRevisionGroup();
                });
              });
            }
          };
          viewModel.getEventParticipant();
          return $scope.viewModel = viewModel;
        }
      ]);
    };
  });

}).call(this);
