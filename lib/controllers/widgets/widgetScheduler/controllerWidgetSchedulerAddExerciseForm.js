// Generated by CoffeeScript 1.6.3
(function() {
  define(['app', 'ejs', 'underscore', 'utils/utilBuildDTQuery', 'utils/utilParseClientTimeZone', 'utils/utilSafeStringify'], function(app, EJS, _, utilBuildDTQuery, utilParseClientTimeZone, utilSafeStringify) {
    return app.controller('ControllerWidgetSchedulerAddExerciseForm', [
      '$scope', '$route', '$routeParams', 'apiRequest', function($scope, $route, $routeParams, apiRequest) {
        var viewModel;
        $scope.$watch('viewModel.newEventForm.eventType', function(newVal, oldVal) {
          var query;
          if (_.isUndefined(newVal)) {
            return;
          }
          viewModel.newEventForm.doneCheckingTemplatesForType = false;
          query = {
            limit: 1,
            offset: 0,
            filter: [['deletedAt', '=', 'null', 'and'], ['type', '=', viewModel.newEventForm.eventType, 'and']]
          };
          return apiRequest.get('template', [], query, function(response, responseRaw) {
            viewModel.newEventForm.doneCheckingTemplatesForType = true;
            return viewModel.newEventForm.templatesForType = response.response.length > 0 ? true : false;
          });
        }, true);
        viewModel = {
          clientTimeZone: utilParseClientTimeZone(),
          newEventForm: {},
          activeWizardStep: 0,
          isStepValid: function(step) {
            var form, result, step0Valid, step1Valid, step2Valid;
            if (step == null) {
              step = false;
            }
            if (!$scope.newEventForm) {
              return false;
            }
            form = $scope.newEventForm;
            if (step === false) {
              step = viewModel.activeWizardStep;
            }
            step0Valid = form.eventType.$valid && form.name.$valid && form.description.$valid && form.date.$valid && viewModel.newEventForm.templatesForType && viewModel.newEventForm.doneCheckingTemplatesForType;
            step1Valid = form.templateUid.$valid && form.revisionUid.$valid;
            step2Valid = $scope.viewModel.newEventForm.employeeUids && $scope.viewModel.newEventForm.employeeUids.length;
            switch (step) {
              case 2:
                result = step0Valid && step1Valid && step2Valid;
                break;
              case 1:
                result = step0Valid && step1Valid;
                break;
              case 0:
                result = step0Valid;
            }
            return result;
          },
          toggleEmployeeToEvent: function(employeeUid) {
            var empIndex;
            if (!_.isArray(viewModel.newEventForm.employeeUids)) {
              viewModel.newEventForm.employeeUids = [];
            }
            empIndex = viewModel.newEventForm.employeeUids.indexOf(employeeUid);
            if (empIndex === -1) {
              return viewModel.newEventForm.employeeUids.push(employeeUid);
            } else {
              return viewModel.newEventForm.employeeUids.splice(empIndex, 1);
            }
          },
          closeAddNewExerciseForm: function() {
            $scope.viewModel.newEventForm = {};
            $scope.viewModel.newEventForm.submitting = false;
            $scope.viewModel.activeWizardStep = 0;
            $scope.$parent.viewModel.showNewExerciseForm = false;
            $scope.newEventForm.$setPristine();
            return $scope.$parent.viewModel.fullCalendarOptions.changeIncrementor++;
          },
          submitAddNewExercise: function() {
            var form;
            $scope.viewModel.newEventForm.submitting = true;
            form = viewModel.newEventForm;
            return apiRequest.post('event', {
              name: form.name,
              dateTime: new Date(form.date).toISOString(),
              revisionUid: form.revisionUid,
              participantsUids: form.employeeUids
            }, {}, function(eventResponse) {
              $scope.viewModel.closeAddNewExerciseForm();
              /*
              if eventResponse.code != 201
                $scope.viewModel.closeAddNewExerciseForm()
                return
              
              eventUid = ''
              for key, value of eventResponse.uids
                eventUid = value
                break
              
              insertObjects = []
              for employeeUid in form.employeeUids
                insertObjects.push {
                  eventUid:    eventUid
                  employeeUid: employeeUid
                }
              
              #console.log 'insertObjects'
              #console.log insertObjects
              
              apiRequest.post 'eventParticipant', insertObjects, {}, (eventParticipantResponse) ->
                console.log 'eventParticipantResponse'
                console.log eventParticipantResponse
                $scope.viewModel.closeAddNewExerciseForm()
              */

            });
          },
          templatesListDataTable: {
            columnDefs: [
              {
                mData: null,
                aTargets: [0],
                bSortable: true,
                mRender: function(data, type, full) {
                  var resHtml;
                  return resHtml = '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].name"></span>';
                }
              }, {
                mData: null,
                aTargets: [1],
                bSortable: true,
                sWidth: '45px',
                mRender: function(data, type, full) {
                  var resHtml;
                  return resHtml = _.str.capitalize(full.type);
                }
              }, {
                mData: null,
                aTargets: [2],
                bSortable: false,
                sWidth: '70px',
                mRender: function(data, type, full) {
                  var html;
                  html = '<div class="inline-content">';
                  html += '<button class="btn blue" data-ng-click="$parent.viewModel.newEventForm.templateUid = \'' + full.uid + '\'; $parent.newEventForm.templateUid.$pristine = false;">Select</button>';
                  return html += '</div>';
                }
              }
            ],
            options: {
              bStateSave: true,
              iCookieDuration: 2419200,
              bJQueryUI: false,
              bPaginate: true,
              bLengthChange: true,
              bFilter: false,
              bInfo: true,
              bDestroy: true,
              bServerSide: true,
              bProcessing: true,
              fnServerData: function(sSource, aoData, fnCallback, oSettings) {
                var cacheResponse, query;
                query = utilBuildDTQuery(['name', 'type'], ['name', 'type'], oSettings);
                if (_.isUndefined($scope.viewModel.newEventForm) || _.isUndefined($scope.viewModel.newEventForm.eventType)) {
                  return;
                }
                query.filter.push(['deletedAt', '=', 'null', 'and']);
                query.filter.push(['type', '=', $scope.viewModel.newEventForm.eventType, 'and']);
                query.expand = [
                  {
                    resource: 'revisions',
                    expand: [
                      {
                        resource: 'template'
                      }
                    ]
                  }
                ];
                cacheResponse = '';
                return oSettings.jqXHR = apiRequest.get('template', [], query, function(response, responseRaw) {
                  var dataArr, responseDataString;
                  if (response.code === 200) {
                    responseDataString = responseRaw;
                    if (cacheResponse === responseDataString) {
                      return;
                    }
                    cacheResponse = responseDataString;
                    dataArr = _.toArray(response.response.data);
                    return fnCallback({
                      iTotalRecords: response.response.length,
                      iTotalDisplayRecords: response.response.length,
                      aaData: dataArr
                    });
                  }
                });
              }
            }
          },
          revisionsListDataTable: {
            columnDefs: [
              {
                mData: null,
                aTargets: [0],
                bSortable: true,
                mRender: function(data, type, full) {
                  var resHtml;
                  resHtml = '<span data-ng-bind="resourcePool[resourcePool[\'' + full.uid + '\'].employee.uid].firstName"></span> ';
                  return resHtml += '<span data-ng-bind="resourcePool[resourcePool[\'' + full.uid + '\'].employee.uid].lastName"></span>';
                }
              }, {
                mData: null,
                aTargets: [1],
                bSortable: true,
                mRender: function(data, type, full) {
                  var resHtml;
                  return resHtml = '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].createdAt | date:\'short\'"></span>';
                }
              }, {
                mData: null,
                aTargets: [2],
                bSortable: true,
                mRender: function(data, type, full) {
                  var resHtml;
                  return resHtml = '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].changeSummary"></span>';
                }
              }, {
                mData: null,
                aTargets: [3],
                bSortable: false,
                mRender: function(data, type, full) {
                  var html;
                  html = '<div class="inline-content">';
                  html += '<button class="btn blue" data-ng-click="$parent.viewModel.newEventForm.revisionUid = \'' + full.uid + '\'; $parent.newEventForm.revisionUid.$pristine = false;">Select</button>';
                  return html += '</div>';
                }
              }
            ],
            options: {
              bStateSave: true,
              iCookieDuration: 2419200,
              bJQueryUI: false,
              bPaginate: true,
              bLengthChange: true,
              bFilter: false,
              bInfo: true,
              bDestroy: true,
              bServerSide: true,
              bProcessing: true,
              fnServerData: function(sSource, aoData, fnCallback, oSettings) {
                var cacheResponse, query;
                query = utilBuildDTQuery([], [], oSettings);
                if (_.isUndefined($scope.viewModel.newEventForm) || _.isUndefined($scope.viewModel.newEventForm.templateUid)) {
                  return;
                }
                query.filter.push(['deletedAt', '=', 'null', 'and']);
                query.filter.push(['templateUid', '=', $scope.viewModel.newEventForm.templateUid, 'and']);
                query.expand = [
                  {
                    resource: 'template'
                  }, {
                    resource: 'employee'
                  }
                ];
                cacheResponse = '';
                return oSettings.jqXHR = apiRequest.get('revision', [], query, function(response, responseRaw) {
                  var dataArr, responseDataString;
                  if (response.code === 200) {
                    responseDataString = responseRaw;
                    if (cacheResponse === responseDataString) {
                      return;
                    }
                    cacheResponse = responseDataString;
                    dataArr = _.toArray(response.response.data);
                    return fnCallback({
                      iTotalRecords: response.response.length,
                      iTotalDisplayRecords: response.response.length,
                      aaData: dataArr
                    });
                  }
                });
              }
            }
          },
          employeeListDT: {
            options: {
              bProcessing: true,
              bStateSave: true,
              iCookieDuration: 2419200,
              bPaginate: true,
              bLengthChange: true,
              bFilter: true,
              bInfo: true,
              bDestroy: true,
              bServerSide: true,
              sAjaxSource: '/',
              fnServerData: function(sSource, aoData, fnCallback, oSettings) {
                var cacheResponse, query;
                query = utilBuildDTQuery(['firstName', 'lastName', 'email', 'phone'], ['firstName', 'lastName', 'email', 'phone'], oSettings);
                cacheResponse = '';
                return oSettings.jqXHR = apiRequest.get('employee', [], query, function(response, responseRaw) {
                  var empArr, responseDataString;
                  if (response.code === 200) {
                    responseDataString = responseRaw;
                    if (cacheResponse === responseDataString) {
                      return;
                    }
                    cacheResponse = responseDataString;
                    empArr = _.toArray(response.response.data);
                    return fnCallback({
                      iTotalRecords: response.response.length,
                      iTotalDisplayRecords: response.response.length,
                      aaData: empArr
                    });
                  }
                });
              }
            },
            columnDefs: [
              {
                mData: null,
                bSortable: true,
                aTargets: [0],
                mRender: function(data, type, full) {
                  return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].firstName">' + full.firstName + '</span>';
                }
              }, {
                mData: null,
                bSortable: true,
                aTargets: [1],
                mRender: function(data, type, full) {
                  return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].lastName">' + full.lastName + '</span>';
                }
              }, {
                mData: null,
                bSortable: true,
                aTargets: [2],
                mRender: function(data, type, full) {
                  return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].email">' + full.email + '</span>';
                }
              }, {
                mData: null,
                bSortable: true,
                aTargets: [3],
                mRender: function(data, type, full) {
                  return '<span data-ng-bind="resourcePool[\'' + full.uid + '\'].phone | tel ">' + full.phone + '</span>';
                }
              }, {
                mData: null,
                bSortable: false,
                aTargets: [4],
                mRender: function(data, type, full) {
                  return '';
                }
              }, {
                mData: null,
                bSortable: false,
                sWidth: '70px',
                aTargets: [5],
                mRender: function(data, type, full) {
                  var html;
                  html = '<div class="inline-content" style = "width:100%; text-align:center;">';
                  html += '<button class         = "btn"\
                               data-ng-class = "{true:\'blue\', false:\'red\'}[($parent.viewModel.newEventForm.employeeUids === undefined || $parent.viewModel.newEventForm.employeeUids.indexOf(\'' + full.uid + '\') === -1)]"\
                               data-ng-click = "$parent.viewModel.toggleEmployeeToEvent(\'' + full.uid + '\'); $parent.newEventForm.employeeUids.$pristine = false;">';
                  html += '<span style        = "color:#FFF !important;"\
                             data-ng-hide = "($parent.viewModel.newEventForm.employeeUids.length && $parent.viewModel.newEventForm.employeeUids.indexOf(\'' + full.uid + '\') != -1)"><i style = "display:inline !important;" class="icon-plus"></i> Select</span>';
                  html += '<span style        = "color:#FFF !important;"\
                             data-ng-show = "($parent.viewModel.newEventForm.employeeUids.length && $parent.viewModel.newEventForm.employeeUids.indexOf(\'' + full.uid + '\') != -1)"><i style = "display:inline !important;" class="icon-minus"></i> Remove</span>';
                  html += '</button>';
                  return html += '</div>';
                }
              }
            ]
          }
        };
        return $scope.viewModel = viewModel;
      }
    ]);
  });

}).call(this);
