// Generated by CoffeeScript 1.6.3
(function() {
  define(['app', 'jquery', 'datatables', 'datatables_bootstrap', 'underscore', 'underscore_string'], function(app, $, dataTables, dataTables_bootstrap, _, underscore_string) {
    return app.directive("dataTable", [
      '$compile', function($compile) {
        var directive;
        return directive = {
          restrict: 'A',
          scope: 'isolate',
          link: function(scope, element, attrs) {
            var bindDetailCallbacks, dataTable, explicitColumns, keysLength, options;
            bindDetailCallbacks = function() {
              return element.find('.detail').unbind('click').bind('click', function() {
                var $el, accessor, data, detailRow, el, html, newElement, _this;
                $el = $(this).parents('tr');
                el = $el.get(0);
                _this = this;
                if (dataTable.fnIsOpen(el)) {
                  detailRow = $el.find('+ tr:first');
                  return detailRow.find('> td > div').slideUp(function() {
                    $(_this).addClass('blue');
                    $(_this).removeClass('black');
                    dataTable.fnClose(el);
                    $el.find('.m-icon-swapup').hide();
                    return $el.find('.m-icon-swapdown').fadeIn();
                  });
                } else {
                  $el.find('.m-icon-swapdown').hide();
                  $el.find('.m-icon-swapup').fadeIn();
                  $(this).removeClass('blue');
                  $(this).addClass('black');
                  data = dataTable.fnGetData(el);
                  html = scope.$parent.viewModel[attrs['parentDataTableViewModelProp']].detailRow(data);
                  accessor = 'detailRow' + data.uid;
                  dataTable.fnOpen(el, '', accessor + ' details');
                  html = _.str.trim(html);
                  accessor = '.' + accessor;
                  newElement = element.find(accessor);
                  newElement.html($compile(html)(scope));
                  newElement.find('> div').hide().slideDown('fast');
                  return scope.$apply();
                }
              });
            };
            options = {};
            if (attrs.dataTable.length > 0) {
              options = scope.$eval(attrs.dataTable);
            } else {
              options = {
                bStateSave: true,
                iCookieDuration: 2419200,
                bJQueryUI: false,
                bPaginate: false,
                bLengthChange: false,
                bFilter: false,
                bInfo: false,
                bDestroy: true
              };
            }
            explicitColumns = [];
            element.find("th").each(function(index, elem) {
              return explicitColumns.push($(elem).text());
            });
            if (explicitColumns.length > 0) {
              options["aoColumns"] = explicitColumns;
            } else {
              if (attrs.aoColumns) {
                options["aoColumns"] = scope.$eval(attrs.aoColumns);
              }
            }
            if (attrs.aoColumnDefs) {
              options["aoColumnDefs"] = scope.$eval(attrs.aoColumnDefs);
            }
            if (attrs.fnRowCallback) {
              options["fnRowCallback"] = scope.$eval(attrs.fnRowCallback);
            } else {
              options["fnRowCallback"] = function() {};
            }
            if (attrs.aaSorting) {
              options['aaSorting'] = scope.$eval(attrs.aaSorting);
            }
            if (options) {
              options['fnCreatedRow'] = function(nRow, aData, iDataIndex) {};
            }
            options['fnDrawCallback'] = function(data) {
              bindDetailCallbacks();
              $compile($(data.nTable).find('tbody'))(scope);
              if (!scope.$$phase) {
                return scope.$apply();
              }
            };
            dataTable = element.dataTable(options);
            if (attrs.aaData) {
              keysLength = scope.getKeysLength(attrs.aaData);
            } else {
              keysLength = 0;
            }
            if (options.bServerSide && attrs.updateOnResourcePost) {
              scope.$on('resourcePost', function(e, data) {
                if (data['resourceName'] === attrs.updateOnResourcePost) {
                  return dataTable.fnDraw();
                }
              });
              scope.$on('resourcePut', function(e, data) {
                if (data['resourceName'] === attrs.updateOnResourcePost) {
                  return dataTable.fnDraw();
                }
              });
            }
            if (options.bServerSide && attrs.updateWatch) {
              scope.$watch(attrs.updateWatch, function() {
                return dataTable.fnDraw();
              }, true);
            }
            return scope.$watch(attrs.aaData, function(value, oldValue) {
              var convertedVal, propName, propVal, val;
              if (keysLength === scope.getKeysLength(value)) {
                return;
              }
              keysLength = scope.getKeysLength(value);
              val = value || null;
              if (val) {
                convertedVal = [];
                for (propName in val) {
                  propVal = val[propName];
                  if (!propVal.deletedAt) {
                    convertedVal.push(propVal);
                  }
                }
                dataTable.fnClearTable();
                return dataTable.fnAddData(convertedVal);
              }
            }, true);
          }
        };
      }
    ]);
  });

}).call(this);
